# 저수준 파일열기
이전에 써왔던 함수들은 systemcall을 이용한 하나의 라이브러리를 이용한것이였음
지금부터 배울것은 직접 사용하는 시스템콜이고 저수준의 API이다. 
커널 레이어 바로 위에 시스템콜 레이어가 존재한다.

* 파일 열기

int open(const char *pathname, int flags);
int open(const char *pathname, int flags, mode_t mode);

-파라미터
	pathname: 파일 경로
	flags: 접근 모드를 포함한 여러 가지 플래그
	mode: 파일 생성 시 설정할 권한

-반환값
	성공 시 열린 파일 디스크립터(fd)
	실패 시 -1

* 파일 열기 - 플래그
	O_RDONLY: 읽기 전용
	O_WRONLY: 쓰기 전용
	O_RDWR: 읽기 + 쓰기
	O_CREAT: 파일이 존재하지 않으면 regular file 생성
	...

* 파일 열기 - 권한
	rwx/rwx/rwx
         1   2   3
	1. 파일의 주인이 가지는 권한(User)
        2. 파일의 소유자 그룹에 해당하는 사용자가 가지는 권한(Group)
	3. 소유자 그룹도 아니고 소유자자도 아닌 다른 사용자가 가지는 권한(Other)


* 파일 닫기

int close(int fd);


* 파일 포지션 - 오프셋 설정

off_t lseek(int fd, off_t offset, int whence);
=> fseek와 동일함


* 파일 포션 - 현재 오프셋 가져오기

ftell()과 같은 API가 존재하지 않는다.
하지만 다음과 같이 현재 오프셋을 가져올 수 있다.
cur_offset = lseek(fd, 0, SEEK_CUR); 

#############################################################
* 파일에 쓰기 - formatted

int dprintf(int fd, const char *format, ...);
- 파라미터
	fd : 파일 디스크립터
	format : 출력 포맷
	... : 가변 arguments
- 반환값 
	성공시 쓰여진 바이트값
	실패시 음수


* 파일에 쓰기 - byte stream

ssize_t write(int fd, const void *buf, size_t count);
ssize_t pwrite(int fd, const void *buf, size_t count, off_t offset);

- 파라미터
	fd : 파일 디스크립터
	buf : 버퍼 포인터
	count : 저장할 사이즈(바이트)
	offset : 저장할 위치(오프셋, 파일 시작 기준)
- 반환값
	성공시 실제로 파일에 저장한 사이즈(바이트)
	(단, count 보다 작을 수 있음)
	실패시 -1


* 파일에서 읽기 - byte stream

ssize_t read(int fd, void *buf, size_t count)
ssize_t pread(int fd, void *buf, size_t count, off_t offset);

- 파라미터, 반환값
	위와 동일


* 파일 디스크립터 --> 파일 포인터 변환

FILE *fdopen(int fd, const char *mode);

- 파라미터 
	fd : 파일 디스크립터
	mode : 권한 (r, w, etc) (open때)
- 반환값
	성공시 파일 포인터 반환
	실패시 NULL


* 파일 포인터 --> 파일 디스크립터 변환

int fileno(FILE *stream);

- 파라미터
	stream : 파일 포인터

- 반환값
	성공시 파일 디스크립터 반환
	실패시 -1
	

